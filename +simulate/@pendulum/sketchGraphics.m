function sketchGraphics(pendulumObj,time,state,varargin)
% The "sketchGraphics" is called by the "sketch" method, which will
% draw the system at either the given time and state or the current
% system time and state in its draw axis or create a new axis if it
% doesn't have one.
%
% SYNTAX:
%   pendulumObj.sketchGraphics()
%   pendulumObj.sketchGraphics(time)
%   pendulumObj.sketchGraphics(time,state)
%   pendulumObj.sketchGraphics(. . .,'PropertyName',PropertyValue,. . .)
%
% INPUTS:
%   pendulumObj - (1 x 1 simulate.system)
%       An instance of the "simulate.system" class.
%
%   time - (1 x 1 real number) [pendulumObj.time]
%       The time that the system will be drawn at.
%
%   state - (? x 1 real number) [pendulumObj.state]
%       The state that the system will be drawn in.
%
% OUTPUTS:
%
% PROPERTIES:
%   Use line properties for "PropertyName" and "PropertyValue" pairs.
%
% NOTES:
%
% NECESSARY FILES AND/OR PACKAGES:
%   +simulate
%
% AUTHOR:
%   10-MAY-2011 by Rowland O'Flaherty
%
%-------------------------------------------------------------------------------

%% Check Input Arguments

% Apply default values
if nargin < 2, time = pendulumObj.time; end
if nargin < 3, state = pendulumObj.state; end

% Check arguments for errors
assert(isa(pendulumObj,'simulate.pendulum') && numel(pendulumObj) == 1,...
    'simulate:pendulum:sketchGraphics:pendulumObj',...
    'Input argument "pendulumObj" must be a 1 x 1 simulate.pendulum object.')

assert(isnumeric(time) && isreal(time) && isequal(size(time),[1,1]),...
    'simulate:pendulum:sketchGraphics:time',...
    'Input argument "time" must be a 1 x 1 real number.')

assert(isnumeric(state) && isvector(state) && numel(state) == pendulumObj.nStates,...
    'simulate:pendulum:sketchGraphics:state',...
    'Input argument "state" must be a %d x 1 real number.',pendulumObj.nStates)
state = state(:);

%% Parameters
w = pendulumObj.w;
l = pendulumObj.l;

triEdgeLength = .15;
triColor = 'r';
pendulumColor = 'b';

%% Variables
theta = state(1);

%% Initialize Sketch
if isempty(pendulumObj.sketchGraphicsHandle) || ~ishghandle(pendulumObj.sketchGraphicsHandle)
    % Set axis limits
    xlim(1.5*[-l,l])
    ylim(1.5*[-l,l])
    
    % Create static objects
    triangleHandle = patch('Parent',pendulumObj.sketchAxisHandle,...
        'XData',...
        [0;...
        triEdgeLength/2;...
        -triEdgeLength/2],...
        'YData',...
        [triEdgeLength/2/cosd(30);...
        -triEdgeLength/2*cosd(30);...
        -triEdgeLength/2*cosd(30)],...
        'FaceColor',triColor,...
        'EdgeColor','k',...
        'LineWidth',2);
    if ~isempty(varargin)
        set(triangleHandle,varargin{:});
    end
end

%% Update Sketch
if isempty(pendulumObj.sketchGraphicsHandle) || ...
        ~ismember(pendulumObj.sketchGraphicsHandle,get(pendulumObj.sketchAxisHandle,'Children'))
    % Create dynamic objects
    pendulumObj.sketchGraphicsHandle = patch('Parent',pendulumObj.sketchAxisHandle,...
        'XData',...
        [-w/2*cos(theta);...
        w/2*cos(theta); ...
        sqrt((w/2)^2+l^2)*sin(theta + atan((w/2)/l));...
        sqrt((w/2)^2+l^2)*sin(theta - atan((w/2)/l))],...
        'YData',...
        [-w/2*sin(theta);...
        w/2*sin(theta);...
        -sqrt((w/2)^2+l^2)*cos(theta + atan((w/2)/l));...
        -sqrt((w/2)^2+l^2)*cos(theta - atan((w/2)/l))],...
        'FaceColor',pendulumColor,...
        'EdgeColor','k',...
        'LineWidth',2);
    if ~isempty(varargin)
        set(pendulumObj.sketchGraphicsHandle,varargin{:});
    end
else
    % Update dynamic objects
    set(pendulumObj.sketchGraphicsHandle,...
        'XData',...
        [-w/2*cos(theta);...
        w/2*cos(theta); ...
        sqrt((w/2)^2+l^2)*sin(theta + atan((w/2)/l));...
        sqrt((w/2)^2+l^2)*sin(theta - atan((w/2)/l))],...
        'YData',...
        [-w/2*sin(theta);...
        w/2*sin(theta);...
        -sqrt((w/2)^2+l^2)*cos(theta + atan((w/2)/l));...
        -sqrt((w/2)^2+l^2)*cos(theta - atan((w/2)/l))]);
end 

end
